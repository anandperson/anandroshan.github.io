{"version":3,"sources":["pages/Wallet/deposit.js","components/FormFields/FileBrowse.js","components/CoinSelector/index.js"],"names":["WalletDeposit","props","inputChange","e","val","target","value","input","getAttribute","setState","fiatReset","console","log","reset","setTimeout","fiatSubmit","state","transCurrency","transId","transAmount","transProof","alertBox","switchLoader","data","clearJunction","fiatDeposit","then","resp","a","status","message","error","undefined","toString","fileChange","n","t","v","componentDidMount","checkWallet","allPairs","received","adminBankDetails","walletCheck","loading","alert","err","selectCurrency","cur","currentCoin","walletAddress","currency","currencySymbol","currency_id","_id","copyThis","document","getElementById","navigator","clipboard","writeText","param","getUserAddress","temp","address","add_id","getReceivedTransactions","getAllPairs","thePath","location","pathname","coin","substring","lastIndexOf","fc","okay","len","length","forEach","i","curnType","push","coins","fiatCoins","getAdminBankDetails","bank","changeTab","newValue","content","currentTab","attempt","className","this","tabs","type","selectCoin","placeholder","id","onClick","data-target","map","key","date","src","images","hash","amount","href","width","acc_name","acc_number","iban","bank_name","bank_code","swift_code","bank_address","reference_code","required","name","onChange","accept","React","Component","FileBrowse","useState","selected","setSelected","setAccept","setLoading","useEffect","st","s","split","el","trim","browse","click","files","ft","ft2","indexOf","uploadFile","page","file","filePath","CoinSelector","setCoins","filtered","setFiltered","setCurrent","getCoins","toLowerCase","element","currencyName"],"mappings":"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","file":"static/js/44.ea2869fb.chunk.js","sourcesContent":["import QRCode from 'qrcode.react';\nimport React from 'react';\nimport { alertBox, switchLoader } from '../../commonRedux/';\nimport A from '../../components/A';\nimport CoinSelector from '../../components/CoinSelector/index';\nimport FileBrowse from '../../components/FormFields/FileBrowse';\nimport WalletMenu from '../../components/Menu/WalletMenu';\nimport WalletMenuMobile from '../../components/Menu/WalletMenuMobile';\nimport Spinner from '../../components/Spinner/index';\nimport TabsUI from '../../components/Tabs/index';\nimport WalletAllBalance from '../../components/Wallet/allBalance';\nimport walletCheck from '../../hooks/walletCheck';\nimport { fiatDeposit, getAdminBankDetails, getAllPairs, getReceivedTransactions, getUserAddress } from '../../http/wallet-calls';\nimport './styles.css';\n\nclass WalletDeposit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clearJunction:\"\",\n            attempt:0,\n            reset:false,\n            transAmount:'',\n            transId:'',\n            transCurrency:'',\n            // depositTo:null,\n            // depositCurrency:null,\n            transProof:null,\n            received: [],\n            bank:null,\n            currentCoin: null,\n            coins:null,\n            fiatCoins: [],\n            status: null,\n            error:'',\n            loading: false,\n            content : 'loading',\n            currentTab: 0\n        };\n    }\n\n    inputChange = (e) => {\n        var val = e.target.value;\n        var input = e.target.getAttribute(\"name\");\n        this.setState({\n            [input] : val\n        });\n    }\n\n    fiatReset = () => {\n        console.log(\"sdfsdf\");\n        this.setState({\n            reset:true\n        });\n        setTimeout(()=>{\n            this.setState({\n                reset:false\n            })\n        }, 200);\n        // this.setState({\n        //     transAmount:null,\n        //     transId:null,\n        //     transCurrency:null,\n        //     depositTo:null,\n        //     transProof:null,\n        //     depositCurrency:null\n        // });\n    }\n\n    fiatSubmit = () => {\n        \n        if(this.state.transCurrency == '' || this.state.transId == '' || this.state.transAmount == '' || this.state.transProof == ''){\n            alertBox(true, \"All fields are required!\");\n        }else{\n            switchLoader(\"Submitting Request...\");\n            var data = {\n                \"currency\": this.state.transCurrency,\n                \"transactionid\": this.state.transId,\n                \"amount\": this.state.transAmount,\n                \"image\": this.state.transProof,\n                \"clearjunction_id\": this.state.clearJunction\n            };\n          console.log(data);\n\n          fiatDeposit(data).then(async resp => {\n            try {\n                if(resp.status == true){\n                   this.fiatReset();\n                   alertBox(true, resp.message, \"success\")\n                }else{\n                    alertBox(true, resp.message)\n                }\n            } catch (error) {\n                alertBox(true, (error == undefined ? 'Error' : error.toString()));\n            }\n            switchLoader();\n        }, error => {\n                alertBox(true, (error == undefined ? 'Error' : error.toString()));\n                switchLoader();\n        });\n    }\n    };\n\n    fileChange = (n, t, v) => {\n        this.setState({\n            [n] : t == \"upload\" ? v : v\n        });\n    }\n\n    componentDidMount = () => {\n        this.checkWallet();\n    };\n\n    checkWallet = () => {\n        this.allPairs();\n        this.received();\n        this.adminBankDetails();\n        walletCheck().then(resp=>{\n            try {\n                this.setState({\n                    loading: false,\n                    status : resp.data.status == undefined ? '' : resp.data.status\n                }, () => {\n                    //if(resp.data.status == 'Accept'){\n                    // this.allPairs();\n                    // this.received();\n                    // this.adminBankDetails();\n                    //}\n                }); \n            } catch (error) {\n                alert(error);\n            }\n           \n        }, err => {\n            this.setState({\n                loading: false,\n                error: 'Authentication Error!'\n            })\n        })\n    };\n\n    selectCurrency = (cur) => {\n        this.setState({\n            loading : true,\n            currentCoin: cur\n        }, () => this.walletAddress({currency: cur.currencySymbol, currency_id: cur._id}));\n    };\n\n    copyThis = (e) => {\n        var input = e.target.getAttribute(\"data-target\");\n        var val = document.getElementById(input).value;\n        navigator.clipboard.writeText(val);\n        alertBox(true, \"Address Copied!\", \"success\");\n    };\n\n    walletAddress = (param) => {\n        getUserAddress(param).then(resp => {\n            var temp = {\n                address : resp.data,\n                add_id: resp.data._id\n            };\n            this.setState({\n                currentCoin: temp,\n                loading: false\n            }); \n        }, err => {\n            alertBox(true, 'Error generating wallet');\n        })\n        // getWalletAddress(param).then(async resp => {\n        //     try {\n        //         if(resp != null){\n        //             var temp = {\n        //                 address : resp.address,\n        //                 add_id: resp._id\n        //             };\n        //             // console.log(\"w2\");\n        //             // console.log(temp);\n        //             this.setState({\n        //                 currentCoin: temp,\n        //                 loading: false\n        //             },()=>{\n        //                 //window.localStorage.setItem(\"walletAddress\"+param.currencySymbol, JSON.stringify(resp.data));\n        //             }); \n        //         }else{\n        //             console.log(\"next\")\n        //             getUserAddress(param).then(resp => {\n        //                 var temp = {\n        //                     address : resp.data.address,\n        //                     add_id: resp.data._id\n        //                 };\n        //                 // console.log(\"w2\");\n        //                 // console.log(temp);\n        //                 this.setState({\n        //                     currentCoin: temp,\n        //                     loading: false\n        //                 },()=>{\n        //                     param.address = resp.data.address;\n        //                     updateWalletAddress(param);\n        //                     console.log(this.state.currentCoin);\n        //                 }); \n        //             }, err => {\n        //                 alertBox(true, 'Error generating wallet');\n        //             })\n        //         }\n        //     } catch (error) {\n        //         alertBox(true, error);\n        //     }\n            \n        // }, error => {\n        //         alertBox(true, (error == undefined ? 'Error' : error.data.message));\n        // });\n    };\n\n    \n    received = () =>{\n        getReceivedTransactions().then(async resp => {\n            this.setState({\n                loading:false,\n                received: resp.data,\n                error: ''\n            });\n        }, error => {\n            this.setState({\n                loading: false\n            });\n        });\n    }\n\n    allPairs = () =>{\n        var allPairs = [];\n        getAllPairs().then(async resp => {\n            allPairs = resp.data;\n            var thePath = this.props.location.pathname;\n            var coin = thePath.substring(thePath.lastIndexOf('/') + 1);\n            var fc = [];\n            var okay = 0;\n            var len = allPairs.length;\n            allPairs.forEach((e,i)=>{\n                if(e.currencySymbol == coin){\n                    okay = 1;\n                }\n                if(e.curnType == 1){\n                    fc.push(e);\n                }\n                if(i == (len-1)){\n                    \n                        this.setState({\n                            loading:false,\n                            coins: allPairs,\n                            fiatCoins: fc,\n                            error: ''\n                        },()=>{\n                            if(okay==1){\n                                this.selectCurrency(e);\n                            }\n                        });\n                    \n                }\n            });\n            \n        }, error => {\n            this.setState({\n                loading: false\n            });\n        });\n    }\n\n    adminBankDetails = () =>{\n     \n        getAdminBankDetails().then(resp => {\n            console.log(resp);\n            this.setState({\n                bank: resp.data\n            });\n        }, error => {\n            \n        });\n    }\n\n    changeTab = (newValue) => {\n        \n        this.setState({content : [{\n            'date' : '16:23, 12 dec 2018',\n            'amount' : '0.0008',\n            'currency': 'BTC',\n            'tx_hash' : 'sdfsldslksfJLKkLsdKJLKJKlkjkjj23423'\n        }],\n        currentTab: newValue});\n     };\n\n    render() {\n\n        return ( <div className=\"container my-wall-container depositPage\">\n                <div className=\"row mt-2\">\n\n                    {/* <!-- left column --> */}\n                    <div className=\"col-sm empty-container-with-out-border left-column\">\n                        <WalletMenu {...this.props} />\n                    </div>\n                    {/* <!-- end left column --> */}\n\n                    {/* <!-- center column --> */}\n                  \n                 \n                     {\n                        <div className=\"col-sm empty-container-with-border center-column\">\n                    <WalletMenuMobile {...this.props} />\n                    <TabsUI tabs={['Cryptocurrency', 'Bank Wire']} type=\"transactions\" className=\"noBorder\" currentTab={this.state.currentTab} changeTab={this.changeTab} />\n                  \n                         \n                        <div className={\"tab row m--1 mt-2 \" + (this.state.currentTab != 0 && \"d-none\")}>\n                        <div className=\"col-md-5 p-1\">\n                            <div className=\"bordered p-3\">\n                                <CoinSelector selectCoin={this.selectCurrency} />\n                            </div>\n                            </div>\n                            <div className=\"col-md-7 p-1\">\n                                {\n                                    this.state.currentCoin == null ?\n                                    <div className=\"bordered p-3\">\n                                      \n                                            <p>\n                                            Select a coin from the list\n                                        </p>\n                                        \n                                        \n                                    </div>\n                                    :\n                                    <div className=\"bordered p-3\">\n                                          {\n                                            this.state.loading ?\n                                            <Spinner />\n                                            :\n                                        <div>\n                                <div className=\"qrImgHold\">\n                                    {/* <img src={GetAssetImage(\"qr.png\")} className=\"qrImg\" /> */}\n                                    {\n                                        this.state.currentCoin !=null && (this.state.currentCoin.address != undefined && this.state.currentCoin.address != null && this.state.currentCoin.address != '') ? <QRCode value={this.state.currentCoin.address} className=\"qrImg\" /> : null\n                                    }\n                                </div>\n                                <h3 className=\"subtitle\">Scan QR Code or Copy address to deposit {this.state.currentCoin.currencySymbol}</h3>\n                                <div className=\"d-flex justify-content-start align-items\">\n                                    <input className=\"dark-bordered-input\" type=\"text\" placeholder=\"Wallet Address\" id=\"wal1\" value={this.state.currentCoin.address} />\n                                    <button className=\"btn btn-main box\" onClick={(e) => this.copyThis(e)} data-target=\"wal1\">Copy</button>\n                                </div>\n                                <div className=\"note\">\n                                <p>Note:</p>\n                                <p>\n                                    Minimum deposit is 0.001 {this.state.currentCoin.currencySymbol}, deposits below that can not be recovered and would be lost forever. Deposit only {this.state.currentCoin.currencySymbol} to this address. Minimum 30 blockchain confirmations requied.\n                                </p>\n                                </div>\n                                    </div>\n    }\n                                </div>\n                                }\n                                \n                            </div>\n                          \n                                <div className=\"p-4\"> \n                            <h3 className=\"subtitle mt-3\">Recent Received</h3>\n                            <div className=\"tableHold\">\n                            <table className=\"table\">\n                                <tbody>\n                                    {\n                                        this.state.received.map((e,i) => {\n                                            return <tr className=\"whiteBg\" key={i}>\n                                            <td className=\"time\">{e.date}</td>\n                                            <td><img src={e.images} className=\"smallPic\" /></td>\n                                            <td><span className=\"fa fa-arrow-left\"></span> {e.hash}</td>\n                                            <td className=\"amount\">{e.amount} {e.currencySymbol} <span className=\"fa fa-check\"></span></td>\n                                        </tr>\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                            </div>\n                            </div>\n\n                            {/* <h3 className=\"subtitle mt-3\">Recent Deposits</h3>\n                            <div className=\"tableHold\">\n                            <table className=\"table\">\n                                <tbody>\n                                <tr className=\"whiteBg title\">\n                                  <td>Date & Time</td>\n                                  <td>Currency</td>\n                                  <td>Transaction ID</td>\n                                  <td>Amount</td>\n                                  <td>Type</td>\n                                  <td>Reason</td>\n                                  <td>Status</td>\n                                </tr>\n                                <tr>\n                                    <td className=\"time\">Oct 17 2020 4:00:13 PM</td>\n                                    <td className=\"time\">ETH</td>\n                                    <td className=\"time\">6543188461541</td>\n                                    <td className=\"time\">50.00</td>\n                                    <td className=\"time\">Send</td>\n                                    <td className=\"time\">sdf</td>\n                                    <td className=\"time\">Sent <span className=\"dot bg-success\"></span></td>\n                                </tr>\n                                <tr>\n                                    <td className=\"time\">Oct 17 2020 4:00:13 PM</td>\n                                    <td className=\"time\">ETH</td>\n                                    <td className=\"time\">6543188461541</td>\n                                    <td className=\"time\">50.00</td>\n                                    <td className=\"time\">Send</td>\n                                    <td className=\"time\">sdf</td>\n                                    <td className=\"time\">Sent <span className=\"dot bg-warning\"></span></td>\n                                    \n                                </tr>\n                                <tr>\n                                    <td className=\"time\">Oct 17 2020 4:00:13 PM</td>\n                                    <td className=\"time\">ETH</td>\n                                    <td className=\"time\">6543188461541</td>\n                                    <td className=\"time\">50.00</td>\n                                    <td className=\"time\">Send</td>\n                                    <td className=\"time\">sdf</td>\n                                    <td className=\"time\">Sent <span className=\"dot bg-danger\"></span></td>\n                                    \n                                </tr>\n                                </tbody>\n                            </table>\n                            </div> */}\n\n                        </div>\n                        {\n                        this.state.reset ? <Spinner />\n                        :\n                        <div className={\"tab mt-3 p-2 bordered \"+(this.state.currentTab != 1 && \"d-none\")}>\n                            {\n                        this.state.status != 'Accept' && !this.state.loading && <div className=\"col-sm empty-container-with-border center-column\">\n                            <p className=\"text-danger text-center mt-4\">Finish KYC to use this feature</p>\n                            <div className=\"text-center\">\n                                <A href=\"/wallet/verification\"><button className=\"btn btn-main\">Go to Verification</button></A>\n                            </div>\n                        </div>\n                    }\n                            {/* <div className=\"form-group\">\n                            <label>Currency</label>\n                            <select className=\"form-control\" value={this.state.depositCurrency} name=\"depositCurrency\" onChange={this.inputChange}>\n                                <option value=\"\">Select</option>\n                                {\n                                    this.state.coins != null && this.state.coins.map((e,i) => {\n                                        return <option value={e.currencySymbol}>{e.currencySymbol}</option>\n                                    })\n                                }\n                            </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>Transfer To</label>\n                                <input type=\"text\" className=\"form-control\" name=\"depositTo\" placeholder=\"To Email ID\"  onChange={this.inputChange}/>\n                            </div> */}\n{\n                       !this.state.loading && this.state.status == 'Accept' && <div>\n                            <div className=\"note\">\n                            <p><strong>Wire Transfer Deposit-Bank Wire</strong></p>\n\n                            <p><strong>Deposit to your account using the information below. You'll need to contact your bank for specific instructions.</strong></p>\n                            <ul>\n                                <li>Be sure to include the 'Reference' code given below- this code identifies the deposit with your account.</li>\n                                <li>Don't exceed your daily or monthly funding limits. If you exceed the limits, your account will be frozen until you get verified for higher limits or until the funds are returned to you.</li>\n                                <li>Fees listed are what our bank charge us. Other banks used during the transfer may charge additional fees and are out of our control.</li>\n                                <li>Multiple deposits of the same amounts within a few days of each other may be delayed. If you must make multiple deposit, consider sending different amounts.</li>\n                                <li>Important: The name on the bank account you are depositing from must match the name entered for verification on the Eclipton account you are depositing into.</li>\n                                <li>Fidor can accept international wire transfer deposits (EUR only), but withdrawals can only be sent to SEPA bank accounts.</li>\n                                <li>Please be aware that Fidor can only accept Euro transfers. Transfer sent in any other currency will be rejected and returned to you automatically.</li>\n                            </ul>\n                            </div>\n                            <div className=\"form-group mt-4\">\n                            <label>Bank Details</label>\n                            \n\n                            {\n                                this.state.transCurrency == '' && <p className=\"text-danger text-small\">Choose a currency to see the bank details</p>\n                            }\n                            {\n                                this.state.bank == null  ?\n                                <Spinner />\n                                : this.state.bank.map((e,i) => {\n                                    \n                                    return e.currency == this.state.transCurrency &&  <table className=\"table\"  key={i}>\n                                    {/* <Collapsible title={e.acc_name+\" (\"+e.currency+\")\"} key={i}></Collapsible> */}\n                                    <tbody>\n                                    <tr>\n                                        <th width=\"200px\">Account Name</th><td>{e.acc_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Address</th><td>{e.address}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Account Number</th><td>{e.acc_number}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">IBAN</th><td>{e.iban}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Bank Name</th><td>{e.bank_name}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Bank Code</th><td>{e.bank_code}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Swift</th><td>{e.swift_code}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Bank/Branch Address</th><td>{e.bank_address}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Reference Code</th><td>{e.reference_code}</td>\n                                    </tr>\n                                    <tr>\n                                        <th width=\"200px\">Currency</th><td>{e.currency}</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            {/* </Collapsible> */}\n                                })\n                            }\n                            \n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>Transaction ID</label>\n                                <input type=\"text\" className=\"form-control\" required placeholder=\"for Reference\" name=\"transId\" onChange={this.inputChange} />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>ClearJunction ID</label>\n                                <input type=\"text\" className=\"form-control\" required placeholder=\"for Reference\" name=\"clearJunction\" onChange={this.inputChange} />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label>Amount</label>\n                                <div className=\"d-flex justify-content-start align-items\">\n                                    <select className=\"form-control currencySelect\" name=\"transCurrency\" onChange={this.inputChange}>\n                                        <option value=\"\">Select</option>\n                                        {\n                                            this.state.fiatCoins.length > 0 && this.state.fiatCoins.map((e,i) => {\n                                                return <option value={e.currencySymbol} key={i}>{e.currencySymbol}</option>\n                                            })\n                                        }\n                                        </select>\n                                    <input className=\"form-control\" type=\"text\" placeholder=\"Amount\" name=\"transAmount\" onChange={this.inputChange} />\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Deposit Proof</label>\n                                <FileBrowse name=\"transProof\" type=\"upload\" fileChange={this.fileChange} accept=\"image/*, application/pdf\" />\n                            </div>\n\n                            <div className=\"form-group mt-80 d-flex align-items-center justify-content-end\">\n                                <button className=\"btn btn-outline box mr-2 big\" onClick={this.fiatReset}>Reset</button>\n                                <button className=\"btn btn-main box big\" onClick={this.fiatSubmit}>Submit</button>\n                            </div>\n\n\n\n                        </div>\n    }\n    </div>}\n                    \n                    </div>\n    }\n\n                    <div className=\"col-sm empty-container-with-out-border right-column\">\n                        <WalletAllBalance /> \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WalletDeposit;\n","import React, {useEffect, useState} from 'react';\nimport Spinner from '../Spinner/index';\nimport { uploadFile } from '../../http/http-calls';\nimport { alertBox } from '../../commonRedux/';\nimport './styles.css';\n\n  \nconst FileBrowse = props => {\n    const [selected, setSelected] = useState('');\n    const [accept, setAccept] = useState('valid');\n    const [loading, setLoading] = useState(false);\n\n    useEffect(()=>{\n        var st = props.accept;\n        if(st != undefined && st != null && st != '' && st != '*'){\n            var s = 'valid ';\n            var sts = st.split(\",\");\n            sts.forEach((el)=> {\n                if(el.trim() == 'image/*'){\n                    s += \"image\";\n                }else{\n                    s += \", pdf\";\n                }\n            });\n            setAccept(s);\n        }\n    }, []);\n\n    const browse = (e) => {\n        var target = e.target.getAttribute(\"data-target\");\n        document.getElementById(target).click();\n    };\n    \n    const inputChange = (e) => {\n        var val = e.target.files[0];\n        var st = props.accept;\n        var ft = val['type'];\n        console.log(ft)\n        var ft2 = ft.split('/')[0];\n        var ftf = ft2;\n        if(ft2 == 'application'){\n            ft2 = ft; \n            ftf = ft.split('/')[1];\n        }\n        if(st == undefined || st == null || st == '' || st == '*' || st.indexOf(ft2) != -1){\n            setSelected(val.name);\n            if(props.type == \"upload\"){\n                setLoading(true);\n                uploadFile({page: props.page == null ? \"general\" : props.page, file: val}).then(async resp => {\n                    props.fileChange(props.name, props.type, resp.file.filePath )\n                    console.log(resp);\n                    setLoading(false);\n                }, error => {\n                    setLoading(false);\n                    alertBox(true, error.message);\n                });\n            }else{\n                props.fileChange(props.name, props.type, val);\n            }\n        }else{\n            alertBox(true,\"Please choose \"+accept+\" files only\");\n        }\n    };\n\n  return (\n   <div className=\"fileBrowse\">\n    <div className=\"d-flex justify-content-start align-items\">\n        <input className=\"form-control\" value={props.type == \"upload\" ? selected : props.value != undefined ? props.value.name : ''} type=\"text\" placeholder=\"jpg, png, jpeg, pdf files only\" data-target={props.name} onClick={(e) => browse(e)}  />\n        <input type=\"file\" name=\"file\" className=\"hide\" id={props.name} onChange={(e) => inputChange(e)} accept={props.accept != undefined && props.accept != null ? props.accept : \"*\"} />\n        <button className=\"btn btn-main box\" data-target={props.name} type=\"button\" onClick={(e) => browse(e)}>\n            {loading ? <Spinner /> : \"Browse\"}\n        </button>\n    </div>\n   </div>\n  );\n\n};\n\nexport default FileBrowse;\n\n","import React, {useEffect, useState} from 'react';\nimport Spinner from '../Spinner/index';\nimport {getAllPairs} from '../../http/wallet-calls';\nimport './styles.css';\nimport { search } from 'superagent';\n\n  \nconst CoinSelector = props => {\n    const [coins, setCoins] = useState(null);\n    const [filtered, setFiltered] = useState(null);\n    const [currentCoin, setCurrent] = useState(props.selected);\n\n    const selectCoin = (val, i) => {\n       setCurrent(val.currencySymbol);\n       props.selectCoin(val);\n    };\n    \n    useEffect(() => {\n        getCoins();\n    }, []);\n    \n    // useEffect(() => {\n    //     if(props.selected != undefined && props.selected != null && props.selected != ''){\n    //     console.log(\"selected\" , props.selected)\n    //     setCurrent(props.selected);\n    //     }\n    // }, [props.selected]);\n\n    const getCoins = () => {\n        // var allPairs = window.localStorage.getItem(\"allPairs\");\n        // if(allPairs != null){\n        //     allPairs = JSON.parse(allPairs);\n        //     setCoins(allPairs);\n        // }\n        getAllPairs().then(async resp => {\n            setCoins(resp.data);\n        }, error => {\n            setCoins(null);\n        });\n    }\n\n    const search = (e) => {\n        var val = e.target.value;\n        if(val == ''){\n            setFiltered(null);\n        }else{\n            val = val.toLowerCase();\n            var temp = coins;\n            var selected = [];\n            coins.forEach(element => {\n                if(element.currencyName.toLowerCase().indexOf(val) != -1 || element.currencySymbol.toLowerCase().indexOf(val) != -1){\n                    selected.push(element);\n                }\n            });\n            setFiltered(selected);\n        }\n    }\n\n  return (\n   <div className=\"coinSelector\">\n       <input type=\"text\" placeholder=\"Search\" onChange={search} />\n        <div className=\"bottom-border-list\">\n            {\n                coins == null ?\n                <Spinner />\n                :\n                filtered == null ?\n                coins.map((e, i) => {\n                    return (\n                        e.curnType == 1 || e.currencySymbol == 'BLCK' ?\n                        null\n                        :\n                        <div key={i} className={\"list-item pointer \"+(e.currencySymbol == currentCoin ? 'active' : '')} onClick={() => {selectCoin(e, i)}}>{e.currencyName + \" (\"+e.currencySymbol+\")\"} <span className=\"fa fa-chevron-right\"></span></div>\n                    )\n                })\n                :\n                filtered.map((e, i) => {\n                    return  e.currencySymbol == 'BLCK' ? null : <div key={i} className={\"list-item pointer \"+(e.currencySymbol == currentCoin ? 'active' : '')}  onClick={() => { selectCoin(e, i)}}>{e.currencyName + \" (\"+e.currencySymbol+\")\"} <span className=\"fa fa-chevron-right\"></span></div>\n                })\n            }\n        </div>\n   </div>\n  );\n\n};\n\nexport default CoinSelector;"],"sourceRoot":""}