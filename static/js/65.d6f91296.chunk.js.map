{"version":3,"sources":["components/Post/CategoryBlogs.js","pages/CategoryWiseBlogs/index.js"],"names":["CategoryBlogs","props","checkWallet","console","log","walletCheck","then","resp","getCoins","err","coins","localStorage","getItem","setState","JSON","parse","coinsLoaded","getAllPairs","setItem","stringify","data","getPaginatePost","userDetails","currentUser","getCategoryBlogs","userid","undefined","_id","limit","state","page","category","a","posts","post","hasMore","length","postLoaded","showSkeleton","error","loadFunc","prevState","commentLike","postid","commentId","likeComment","message","commentReply","comment","commentIndex","callBack","replyComment","likePost","liked","postCmt","obj","commentText","postComment","showComments","getComments","refreshHighlights","handleChange","evt","index","target","name","value","replyCmt","getSkeletonContent","i","className","key","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","cx","cy","r","query","bind","this","prevProps","loadMore","pageStart","initialLoad","map","BlogPost","filter","Array","fill","item","React","Component","require","CategoryWiseBlogs","setStateFunc","getCat","loading","getBlogCategories","categories","refreshing","filterPosts","opt","latestpost","dataChange","Object","keys","priceFrom","priceTo","current","getData","d","formdata","postst","match","params","A","href","Button","e","variant","type","BlogPosts","RewardsWidget","PopularArticles"],"mappings":"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","file":"static/js/65.d6f91296.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { getProfilePosts, likeComment, replyComment, likePost, postComment, getComments } from '../../http/http-calls';\nimport { getPosts, getGlobalPosts, getCategoryBlogs } from '../../http/blog-calls';\nimport BlogPost from './BlogPost';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ContentLoader from \"react-content-loader\";\nimport Share from './Share';\nimport TimeAgo from 'react-timeago';\nimport { getAllPairs} from '../../http/wallet-calls';\nimport walletCheck from '../../hooks/walletCheck';\n\nclass CategoryBlogs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: props.query,\n            posts: [],\n            category: props.category,\n            coins:[],\n            coinsLoaded: false,\n            page: 1,\n            limit: props.limit == null ? 5 : props.limit,\n            hasMore: true,\n            postLoaded: false,\n            showSkeleton: false,\n            showComments: false,\n            commentText: ''\n        }\n        this.commentLike = this.commentLike.bind(this);\n        this.loadFunc = this.loadFunc.bind(this);\n        this.likePost = this.likePost.bind(this);\n        this.getPaginatePost = this.getPaginatePost.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(this.props.category);\n        this.getPaginatePost();\n        // this.checkWallet();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.category != prevProps.category|| prevProps.loadMore != this.props.loadMore) {\n            console.log(this.props.category);\n            this.setState({\n                category:this.props.category,\n                posts: []\n            }, () => {\n                this.getPaginatePost();\n            });\n          \n        }\n    }\n\n    // componentWillReceiveProps() {\n    //     if (this.props.latestpost && this.props.latestpost.userid) {\n\n    //         const latestpost = this.props.latestpost;\n    //         const postObj = this.state.posts;\n\n    //         let isExist = postObj.find(item => item._id == latestpost._id)\n    //         if (!(isExist && isExist._id)) {\n    //             postObj.unshift(latestpost);\n    //             this.setState({ posts: [] }, () => {\n    //                 this.setState({ posts: postObj });\n    //             });\n    //         }\n    //     }\n    // }\n    checkWallet = () =>{\n        console.log(\"okaoay\")\n        walletCheck().then(resp=>{\n            console.log(\"okaokay\")\n            this.getCoins();\n        }, err => {\n            console.log(\"notokaokay\")\n            console.log(err);\n        })\n    }\n\n    getCoins = () => {\n        var coins = localStorage.getItem(\"allPairs\");\n        if(coins != null){\n            this.setState({\n                coins: JSON.parse(coins)\n            }, () => {\n                this.setState({\n                    coinsLoaded:true\n                })\n            })\n        }\n        getAllPairs().then(resp => {\n            localStorage.setItem(\"allPairs\", JSON.stringify(resp.data));\n            console.log(resp.data);\n            this.setState({\n                coins: resp.data,\n            }, () => {\n                this.setState({\n                    coinsLoaded:true\n                })\n            });\n        }, err => {\n            console.log(err);\n        })\n    }\n    getPaginatePost = () => {\n        // if((typeof this.props.currentUser == undefined || this.props.currentUser == null) || (typeof this.props.match != undefined && this.props.match.params.id != null && typeof this.props.match.params.id != undefined && this.props.match.params.id != '' && this.props.match.params.id != this.props.currentUser._id)){\n        //     getProfilePosts({ userid: this.props.match.params.id, limit: this.state.limit, page: this.state.page})\n        //     .then(async resp => {\n        //         this.setState({\n        //             posts: [...this.state.posts, ...resp.post],\n        //             hasMore: resp.post && resp.post.length > 0 ? true : false,\n        //             postLoaded: true, showSkeleton: false\n        //         });\n        //     }, error => {\n                \n        //         this.setState({ postLoaded: true, showSkeleton: false });\n        //     });\n        //   }else{\n        let userDetails = this.props.currentUser;\n        getCategoryBlogs({ userid: userDetails == undefined ? 0 : userDetails._id, limit: this.state.limit, page: this.state.page, category: this.state.category }, true)\n            .then(async resp => {\n                this.setState({\n                    posts: [...this.state.posts, ...resp.post],\n                    hasMore: resp.post && resp.post.length > 0 ? true : false,\n                    postLoaded: true, showSkeleton: false\n                });\n            }, error => {\n                \n                this.setState({ postLoaded: true, showSkeleton: false });\n            });\n        //}\n    }\n\n    loadFunc = () => {\n        if (!this.state.showSkeleton) {\n            this.setState({ showSkeleton: true })\n            this.setState(prevState => {\n                return {\n                    ...prevState,\n                    page: prevState.page + 1,\n                    showSkeleton: true\n                }\n            }, () => {\n                this.getPaginatePost();\n            })\n        }\n\n    }\n\n    commentLike = (postid, commentId) => {\n        // this.setState({ post: { ...this.state.post, likeActive: 1 - liked } });\n        likeComment({ postid, commentId }, true)\n            .then(async resp => {\n                if (resp.message == 'Like') {\n                    //this.postActivityCount('likesCount');\n                } else if (resp.message == 'Dislike') {\n                   // this.postActivityCount('likesCount', 'sub');\n                }\n            }, error => {\n                \n            });\n    }\n\n    commentReply = (postid, commentId, comment, commentIndex, callBack) => {\n        replyComment({ postid: postid, commentId, comment }, true)\n            .then(async resp => {\n                callBack(resp.comment, commentIndex)\n            }, error => {\n                \n        });\n    }\n\n    likePost = (postid, liked) => {\n        likePost({ postid: postid }, true)\n            .then(async resp => {\n\n            }, error => {\n                \n            });\n    }\n\n    postCmt = (postid) => {\n        let obj = { postid, comment: this.state.commentText };\n        postComment(obj)\n            .then(async resp => {\n\n            }, error => {\n                \n            });\n    }\n\n    showComments = (postid) => {\n\n        getComments({ postid }, true)\n            .then(async resp => {\n                this.setState({ showComments: true });\n            }, error => {\n                \n\n            });\n    }\n\n    refreshHighlights = () => {\n        \n    }\n\n    handleChange = (evt, index) => {\n        const { name, value } = evt.target;\n        if (evt.target.name != 'replyCmt') {\n            this.setState({ [name]: value }, () => { });\n        } else {\n            this.setState({ [`${name}`]: { ...this.state.replyCmt, [index]: value } }, () => {\n            });\n        }\n    }\n\n    getSkeletonContent = (i) => {\n        return (\n            <div className=\"row empty-inner-container-with-border post\" key={i}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <ul className=\"list-group w-100 m-0\">\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                <ContentLoader\n                                    speed={2}\n                                    width={610}\n                                    height={350}\n                                    viewBox=\"0 0 610 350\"\n                                    backgroundColor=\"#f3f3f3\"\n                                    foregroundColor=\"#ecebeb\"\n                                    \n                                >\n                                    <rect x=\"48\" y=\"8\" rx=\"3\" ry=\"3\" width=\"88\" height=\"6\" />\n                                    <rect x=\"48\" y=\"26\" rx=\"3\" ry=\"3\" width=\"52\" height=\"6\" />\n                                    <rect x=\"0\" y=\"56\" rx=\"3\" ry=\"3\" width=\"410\" height=\"6\" />\n                                    <rect x=\"0\" y=\"72\" rx=\"3\" ry=\"3\" width=\"380\" height=\"6\" />\n                                    <rect x=\"0\" y=\"88\" rx=\"3\" ry=\"3\" width=\"178\" height=\"6\" />\n                                    <circle cx=\"20\" cy=\"20\" r=\"20\" />\n                                    <rect x=\"0\" y=\"88\" rx=\"3\" ry=\"3\" width=\"900\" height=\"1000\" />\n                                </ContentLoader>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        const { post, showComments, commentText } = this.state;\n\n        return (\n            <div>\n                   {\n                    this.props.loadMore == undefined || this.props.loadMore ?\n                <InfiniteScroll\n                    pageStart={0}\n                    initialLoad={false}\n                    loadMore={this.loadFunc}\n                    hasMore={this.state.hasMore}\n                >\n                     {this.state.postLoaded  && this.state.posts.map((post, i) => (\n                        <BlogPost coins={this.state.coins} post={post} filter=\"\" refreshHighlights={this.refreshHighlights} commentLike={this.commentLike} commentReply={this.commentReply} key={i} currentUser={this.props.currentUser} />\n                    ))}\n                </InfiniteScroll>\n                :\n                this.state.postLoaded  && this.state.posts.map((post, i) => (\n                    <BlogPost coins={this.state.coins} post={post} filter=\"\" refreshHighlights={this.refreshHighlights} commentLike={this.commentLike} commentReply={this.commentReply} key={i} currentUser={this.props.currentUser} />\n                ))\n                     }\n\n\n                {(this.state.showSkeleton ) &&\n                    <div>\n                        {Array(5).fill().map((item, index) => this.getSkeletonContent(index))}\n                    </div>\n                }\n\n                {(this.state.posts.length === 0 && this.state.postLoaded) &&\n                    <div className=\"post\"><p className=\"post-inner no-found\">No Blogs Found</p></div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default CategoryBlogs;\n","import Button from '../../components/Button';\nimport React from 'react';\nimport A from '../../components/A';\nimport PopularArticles from '../../components/Blog/PopularArticles';\nimport BlogFilter from '../../components/Filter/blogFilter';\nimport BlogPosts from '../../components/Post/BlogPosts';\nimport CategoryBlogs from '../../components/Post/CategoryBlogs';\nimport RewardsWidget from '../../components/RewardsWidget';\nimport { getBlogCategories } from '../../http/blog-calls';\n\nrequire (\"./styles.scss\");\n\nclass CategoryWiseBlogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      postst: [],\n      formdata: null,\n      current: 'all',\n      refreshing: false,\n      loading:true,\n      categories: [],\n      filter: '',\n      latestpost: {}\n    };\n  }\n  setStateFunc = (key,value) => {\n    console.log(key,value);\n    this.setState({[key]:value});\n  }\n\n  componentDidMount() {  \n      console.log(this.props.match.params.category);\n      this.setState({\n        current: this.props.match.params.category,\n        loading:false\n      }, () => {\n        if(this.props.match.params.category == 'all'){\n          this.getCat();\n        }\n\n      })\n     \n  } \n  componentDidUpdate(prevProps) {\n    if(this.props.match.params.category != prevProps.match.params.category){\n      \n        console.log(this.props.match.params.category);\n        this.setState({\n          current: this.props.match.params.category,\n          loading:false\n        }, ()=>{\n          if(this.props.match.params.category == 'all'){\n            this.getCat();\n          }\n        })\n       \n   \n    }\n  } \n\n  getCat = () => {\n    this.setState({ loading:true });\n    getBlogCategories().then(resp => this.setState({categories: resp, loading:false}), err=>{console.log(err)});\n}\n\n  refreshHighlights = () => {\n    this.setState({\n      refreshing: true\n    }, ()=>{\n      this.setState({\n        refreshing: false\n      })\n    })\n  }\n\n  filterPosts = (opt) => {\n    this.setState({\n      latestpost: {},\n      filter: opt\n    });\n  }\n\ndataChange = (data = {}) => {  \n  console.log(data)\n  if(Object.keys(data).length <= 0 || (data.category == '' && data.priceFrom == '' && data.priceTo == '' && data.key == '')){\n    this.setState({\n      current: \"all\"\n    })\n  }else{\n    this.setState({\n      current: \"\"\n    }, () => {\n      this.getData(data);\n    })\n  }\n}\n\ngetData =(data = {}) => {\n  var d = data;\n  d['page']  = 1;\n  d['limit'] =5;\n  d['userid'] = this.props.currentUser._id;\n  console.log(\"gettting\")\n  console.log(d);\n  this.setState({\n    formdata: d\n  })\n  // getPosts(d, true)\n  //     .then(async resp => {\n  //         this.setState({\n  //             posts: [...this.state.posts, ...resp.post],\n  //             hasMore: resp.post && resp.post.length > 0 ? true : false,\n  //             postLoaded: true, showSkeleton: false\n  //         });\n  //     }, error => {\n          \n  //         this.setState({ postLoaded: true, showSkeleton: false });\n  //     });\n  // getGigs(d).then(resp => {\n  //     this.setState({\n  //         gigs: resp.post\n  //     })\n  // }, err=>{\n  //     console.log(err);\n  // })\n}\n\n    render() {\n        return (\n            // <!-- Wall container -->\n            <div className=\"myBlogsPage\">\n            <div className=\"container my-wall-container \">\n              <div className=\"row mt-2\">\n                {/* <!-- left column --> */}\n                <div className=\"col-sm empty-container-with-out-border left-column\">\n                  {/* <BlogCategoryMenu  {...this.props} current={this.state.current} /> */}\n                  <BlogFilter dataChange={this.dataChange} />\n                </div>\n                {/* <!-- end left column --> */}\n\n                {/* <!-- center column --> */}\n                <div className=\"col-sm empty-container-with-out-border center-column\">\n                  { this.state.current == 'all'  && \n                <div className=\"banner\">\n                        <div className=\"banner-header banner-header-blog\"></div>\n                        <div className=\"banner-body\">\n                            <div className=\"banner-icon\">\n                            </div>\n                            <div className=\"banner-desc\">\n                                <h3>Write, read and connect</h3>\n                                <p>It's easy and free to post your thinking on any topic and connect with millions of readers.</p>\n                            </div>\n                            <div className=\"banner-btns\">\n                                <A href=\"/add-blog\"><Button>Create Blog</Button></A>  <A href=\"/blogs\"><Button>My Blogs</Button></A> \n                            </div>\n                        </div>\n                    </div>}\n                    {\n                      this.state.loading ? null : \n                      this.state.current == 'all' ?\n                      this.state.categories.map((e, i) => {\n                        return <div className=\"mb-2\">\n                        <div className=\"d-flex justify-content-between align-items-center\"><h2 className=\"subtitle mt-1\">{e.category}</h2> <A href={\"/blogs/\"+e.category} className=\"text-primary d-block mb-2\"><Button variant=\"primary-outline\">View All</Button></A></div>\n                      <CategoryBlogs category={e.category} setState={this.setStateFunc} latestpost={this.state.latestpost}  {...this.props} type=\"blogs\" limit={3} loadMore={false} />\n                      </div>\n                      })\n                      :\n                      <div>\n                        <h2 className=\"subtitle mt-1\">{this.state.current}</h2>\n                      <BlogPosts {...this.props} formdata={this.state.formdata} />\n                      </div>\n                    }\n                    \n                    \n                </div>\n                {/* <!-- end center column --> */}\n\n                {/* <!--  right column --> */}\n                <div className=\"col-sm empty-container-with-out-border right-column\">\n                    <RewardsWidget {...this.props} />\n                {/* <A href=\"/add-blog\" className=\"widgetButtonMenu \">\n                   <i className=\"fa fa-plus\"></i> Create Blog\n                </A>\n                <A href=\"/blogs\" className=\"widgetButtonMenu mt-3\">\n                   <i className=\"fa fa-book \"></i> My Blogs\n                </A> */}\n                  <PopularArticles />\n                </div>\n                {/* <!-- end right column --> */}\n              </div>\n            </div>\n\n            </div>\n\n      )\n    }\n}\n\nexport default CategoryWiseBlogs;\n"],"sourceRoot":""}