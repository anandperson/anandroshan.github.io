{"version":3,"sources":["pages/Wallet/withdraw.js","components/CoinSelector/index.js"],"names":["WalletWithdraw","props","changeTab","newValue","setState","currentTab","componentDidMount","checkWallet","walletCheck","then","resp","status","undefined","data","getDetails","getWithdrawals","loading","err","error","getUserDetails","a","tfa_status","with_pass","withPassword","getAddresses","getWithdrawAddresses","state","currentCoin","currencySymbol","addresses","inputChange","e","val","target","value","input","getAttribute","usd","fee","EstimatedUSD","withdrawfee","amount","estUsd","selectedOptions","intUsd","intAmount","intCurrency","temp","getUserWithdrawals","withdrawals","selectCurrency","cur","submit","console","log","agree","to","tfa","alertBox","switchLoader","_id","Number","takeFee","note","withdrawRequest","reset","message","toString","setTimeout","attempt","amountCurrency","usdCurrency","coins","content","className","this","href","tabs","type","variant","size","selectCoin","length","placeholder","name","onChange","map","el","i","address","readOnly","toFixed","onClick","key","date","withType","reason","React","Component","CoinSelector","useState","setCoins","filtered","setFiltered","selected","setCurrent","useEffect","getCoins","getAllPairs","toLowerCase","forEach","element","currencyName","indexOf","push","curnType"],"mappings":"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","file":"static/js/63.95a41621.chunk.js","sourcesContent":["import React from 'react';\nimport { alertBox, switchLoader } from '../../commonRedux/';\nimport A from '../../components/A';\nimport Button from '../../components/Button';\nimport CoinSelector from '../../components/CoinSelector';\nimport WalletMenu from '../../components/Menu/WalletMenu';\nimport WalletMenuMobile from '../../components/Menu/WalletMenuMobile';\nimport Spinner from '../../components/Spinner/index';\nimport TabsUI from '../../components/Tabs/index';\nimport WalletAllBalance from '../../components/Wallet/allBalance';\nimport walletCheck from '../../hooks/walletCheck';\nimport { getUserDetails, getUserWithdrawals, getWithdrawAddresses, withdrawRequest } from '../../http/wallet-calls';\nimport './styles.css';\n\nclass WalletWithdraw extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            attempt:0,\n            addresses:[],\n            loading:true,\n            reset:false,\n            tfa_status: null,\n            with_pass: null,\n            to:'',\n            withdrawals: null,\n            amountCurrency: '',\n            amount: '',\n            usdCurrency: '',\n            usd: '',\n            tfa: '',\n            withPassword: '',\n            note: '',\n            fee:0,\n            estUsd:0,\n            agree:false,\n            takeFee: true,\n            status:null,\n            currentCoin: null,\n            coins: null,\n            content : 'loading',\n            currentTab: 0\n        };\n    }\n\n    changeTab = (newValue) => {\n        \n        this.setState({\n            currentTab: newValue});\n     };\n\n     componentDidMount = () => {\n        this.checkWallet();\n    };\n\n    checkWallet = () => {\n        walletCheck().then(resp=>{\n            this.setState({\n                status : (resp.data.status == undefined) ? '' : resp.data.status,\n            }, () => {\n                if(resp.data.status == 'Accept'){\n                    this.getDetails();\n                    // this.allPairs();\n                    this.getWithdrawals();\n                    \n                }else{\n                    this.setState({\n                        loading: false\n                    });\n                }\n            });\n        }, err => {\n            this.setState({\n                loading:false,\n                error: 'Authentication Error!'\n            })\n        })\n    };\n\n    getDetails = () => {\n        getUserDetails().then(async resp => {\n            this.setState({\n                loading:false,\n                tfa_status: resp.data.tfa_status,\n                with_pass: resp.data.withPassword,\n                \n            })\n        }, err => {\n            this.setState({\n                loading: false\n            });\n        })\n    }\n\n    getAddresses = () => {\n        getWithdrawAddresses({\n    \t\"currency\" : this.state.currentCoin.currencySymbol\n        }).then(async resp => {\n            if(resp.status == true){\n                this.setState({\n                    addresses: resp.data\n                })    \n            }else{\n                this.setState({\n                    addresses: []\n                })\n            }\n            \n        }, err => {\n            this.setState({\n                loading: false\n            });\n        })\n    }\n\n    inputChange = (e) => {\n        var val = e.target.value;\n        var input = e.target.getAttribute(\"name\");\n   \n        if(input == 'amount'){\n            var usd  = this.state.usd;\n            var fee = this.state.fee;\n            if(this.state.currentCoin != null){\n                usd= val*this.state.currentCoin.EstimatedUSD;\n                fee = (val*this.state.currentCoin.withdrawfee)/100;\n            }\n            this.setState({\n                amount: val,\n                usd : usd,\n                fee:fee\n            });\n        }\n        else if(input == 'intCurrency'){\n            var estUsd = e.target.selectedOptions[0].getAttribute(\"data-usd\");\n            var intUsd = this.state.intUsd;\n            if(this.state.intAmount != ''){\n                intUsd = this.state.intAmount*estUsd;\n            }\n            this.setState({\n                intCurrency : val,\n                estUsd: estUsd,\n                intUsd: intUsd\n            });\n        }\n        else if(input == 'intAmount'){\n            var temp = val*this.state.estUsd;\n            this.setState({\n                intAmount: val,\n                intUsd : temp\n            });\n        }\n        else if(val == 'check'){\n            this.setState({\n                [input] : !this.state[input]\n            });\n        }else{\n            this.setState({\n                [input] : val\n            });\n        }\n    }\n\n    // allPairs = () =>{\n    //     // var allPairs = window.localStorage.getItem(\"allPairs\");\n    //     // if(allPairs != null){\n    //     //     allPairs = JSON.parse(allPairs);\n    //     //     var thePath = this.props.location.pathname;\n    //     //     var coin = thePath.substring(thePath.lastIndexOf('/') + 1);\n            \n    //     //     if(coin != 'despoit' && coin != null){\n    //     //         allPairs.forEach(element => {\n                    \n    //     //             if(element.currencySymbol == coin){\n    //     //                 this.setState({\n    //     //                     loading:false,\n    //     //                     coins: allPairs,\n    //     //                     error: ''\n    //     //                 },()=>{\n    //     //                     if(element != null){\n    //     //                         this.selectCurrency(element);\n    //     //                     }\n    //     //                 });\n    //     //             }\n    //     //         });\n    //     //     }else{\n    //     //         this.setState({\n    //     //             loading:false,\n    //     //             coins: allPairs,\n    //     //             error: ''\n    //     //         });\n    //     //     }\n    //     // }\n    //     getAllPairs().then(async resp => {\n    //         var allPairs = resp.data;\n    //         var thePath = this.props.location.pathname;\n    //         var coin = thePath.substring(thePath.lastIndexOf('/') + 1);\n            \n    //         if(coin != 'despoit' && coin != null){\n    //             allPairs.forEach(element => {\n    //                 if(element.currencySymbol == coin){\n    //                     this.setState({\n    //                         coins: allPairs,\n    //                         error: ''\n    //                     },()=>{\n    //                         if(element != null){\n    //                             this.selectCurrency(element);\n    //                         }\n    //                     });\n    //                 }\n    //             });\n    //         }else{\n    //             this.setState({\n    //                 coins: allPairs,\n    //                 error: ''\n    //             });\n    //         }\n    //         window.localStorage.setItem(\"allPairs\", JSON.stringify(resp.data));\n    //     }, error => {\n  \n    //     });\n    // }\n\n    getWithdrawals = () =>{\n        getUserWithdrawals().then(async resp => {\n            this.setState({\n                withdrawals: resp.data,\n                error: ''\n            });\n        }, error => {\n         \n        });\n    }\n\n    selectCurrency = (cur) => {\n        var usd  = this.state.usd;\n        var fee = this.state.fee;\n        if(cur != null && this.state.amount != ''){\n            usd= this.state.amount*cur.EstimatedUSD;\n            fee = (this.state.amount*cur.withdrawfee)/100;\n        }\n        this.setState({\n            currentCoin: cur,\n            usd:usd,\n            fee:fee\n        }, () => {\n            this.getAddresses();\n        });\n        \n    };\n\n    submit = () => {\n        console.log(this.state);\n        if(!this.state.agree){\n            alertBox(true, \"You need to agree to the terms and conditions in order to continue!\");\n        }\n        else if(this.state.currentCoin == null || this.state.to == '' || this.state.amount == '' || this.state.tfa == '' || this.state.withPassword == ''){\n            alertBox(true, \"Please fill all required fields\");\n        }else{\n            switchLoader(\"Submitting Transfer Request...\");\n        var data = {\n            \"withcurrency\": this.state.currentCoin._id,\n            \"toAddress\": this.state.to,\n            \"withPassword\" : this.state.withPassword,\n            \"withamount\": Number(this.state.amount),\n            \"withType\" : this.state.takeFee ? 1 : 0,\n            \"fees\" : this.state.currentCoin.withdrawfee,\n            \"receiveamount\" : this.state.fee, \n            \"note\" : this.state.note,\n            \"tfa\" : Number(this.state.tfa),\n            \"url\": \"https://eclipton.com/wallet/withdraw\"\n          };\n\n        withdrawRequest(data).then(async resp => {\n            try {\n                if(resp.status == true){\n                    this.reset();\n                    alertBox(true, resp.message, \"success\")\n                }else{\n                    alertBox(true, resp.message)\n                }\n            } catch (error) {\n                alertBox(true, (error == undefined ? 'Error' : error.toString()));\n            }\n            switchLoader();\n        }, error => {\n                alertBox(true, (error == undefined ? 'Error' : error.toString()));\n                switchLoader();\n        });\n    }\n    };\n\n    reset = () => {\n        this.setState({\n            reset:true\n        });\n        setTimeout(()=>{\n            this.setState({\n                reset:false\n            })\n        }, 200);\n    }\n    render() {\n\n        return (\n            <div className=\"container my-wall-container depositPage\">\n                <div className=\"row mt-2\">\n\n                    {/* <!-- left column --> */}\n                    <div className=\"col-sm empty-container-with-out-border left-column\">\n                        <WalletMenu {...this.props} />\n                    </div>\n                    {/* <!-- end left column --> */}\n\n                    {/* <!-- center column --> */}\n                    {\n                        this.state.loading && <div className=\"col-sm empty-container-with-border center-column\"><Spinner /></div>\n                    }\n                    {\n                        this.state.status != 'Accept' && !this.state.loading  && <div className=\"col-sm empty-container-with-border center-column\">\n                            <p className=\"text-danger text-center mt-4\">Finish KYC to use this feature</p>\n                            <div className=\"text-center\">\n                                <A href=\"/wallet/verification\"><button className=\"btn btn-main\">Go to Verification</button></A>\n                            </div>\n                        </div>\n                    }\n                     {\n                        !this.state.loading && this.state.status == 'Accept' && <div className=\"col-sm empty-container-with-border center-column\">\n                    <WalletMenuMobile {...this.props} />\n                    <TabsUI tabs={['Withdraw', 'Recent Withdraw']} type=\"transactions\" className=\"noBorder\" currentTab={this.state.currentTab} changeTab={this.changeTab} />\n                    {\n                        \n                        this.state.reset ? <Spinner /> :\n                        \n                            this.state.tfa_status != 1 || this.state.with_pass =='' ? \n                            <div className=\"d-flex align-items-center justify-content-center flex-column p-4\">\n                                <p>You need to complete the below steps in order to withdraw</p>\n                                {this.state.tfa_status != 1  && <div className=\"mt-2\"><Button variant=\"primary\" size=\"big\"><A href=\"/wallet/tfa\">Enable TFA</A></Button></div> }\n                                {this.state.with_pass == ''  &&  <div className=\"mt-4\"><Button variant=\"primary\" size=\"big\"><A href=\"/wallet/password\">Set Withdrawal Password</A></Button></div> }\n                            </div>\n                            :\n                        <div className={\"tab row m--1 mt-2 \"+(this.state.currentTab != 0 && \"d-none\" )}>\n                            <div className=\"col-md-5 p-1\">\n                            <div className=\"bordered p-3\">\n                            <CoinSelector selectCoin={this.selectCurrency} />\n                            </div>\n                            </div>\n                            <div className=\"col-md-7 p-1\">\n                                {\n                                    this.state.currentCoin == null ?\n                                    <p className=\"p-4 text-center\">Choose a coin from the list</p>\n                                    :\n                                    <div className=\"bordered p-3\">\n                                    <div className=\"form-group\">\n                                    <label>To Address</label>\n                                    {\n                                        this.state.addresses.length > 0 ? \n                                        <select value={this.state.to} className=\"form-control\" placeholder=\"Wallet Address\" name=\"to\" onChange={this.inputChange}>\n                                            <option value=\"\">Select</option>\n                                            {\n                                                this.state.addresses.map((el, i)=>{\n                                                    return <option value={el.address}>{el.address}</option>\n                                                })\n                                            }\n                                        </select>\n                                        :\n                                        <div className=\"\"><Button variant=\"primary\"><A href={\"/wallet/address/\"+this.state.currentCoin.currencySymbol}><i className=\"fa fa-plus\"></i> Add Address</A></Button></div>\n                                    }\n                                    \n                                    \n                                </div>\n                                    <div className=\"form-group\">\n                                    <label>Amount</label>\n                                    <div className=\"d-flex justify-content-start align-items\">\n                                        <input type=\"text\" className=\"form-control currencySelect\" name=\"amountCurrency\" value={(this.state.currentCoin == null) ? '' : this.state.currentCoin.currencySymbol} readOnly />\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Amount\" name=\"amount\" onChange={this.inputChange} value={this.state.amount}  />\n                                        \n                                    </div>\n                                    <div className=\"mt-2 d-flex justify-content-start align-items\">\n                                        <input type=\"text\" className=\"form-control currencySelect\" name=\"usdCurrency\" readOnly value=\"USD\" readOnly />\n                                        <input className=\"form-control\" type=\"text\" placeholder=\"Amount\" name=\"usd\" onChange={this.inputChange} value={this.state.usd} readOnly />\n                                    </div>\n                                    <small><strong>Received Amount: {this.state.fee.toFixed(8)}</strong></small>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>TFA </label>\n                                   \n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Google Authenticator Code\" name=\"tfa\" onChange={this.inputChange} value={this.state.tfa}  />\n                                   \n                                    \n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Withdraw Password </label>\n                                   \n                                    <input type=\"password\" className=\"form-control\" placeholder=\"Withdraw Password\" name=\"withPassword\" onChange={this.inputChange} value={this.state.withPassword}  />\n                                   \n                                    \n                                </div>\n    \n                                <div className=\"form-group\">\n                                    <label>Note</label>\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"Write a message (eg: Thanks for fast delivery)\" name=\"note\" onChange={this.inputChange} value={this.state.note}  />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"checkbox\"><input type=\"checkbox\" name=\"agree\" value=\"check\" onChange={this.inputChange} /> I agree to the <A href=\"\" className=\"text-main\">Terms & Conditions</A></div>\n                                </div>\n                                {/* <div className=\"form-group\">\n                                    <div className=\"checkbox\"><input type=\"checkbox\" name=\"takeFee\" value=\"check\" onChange={this.inputChange} /> Take Fee Amount</div>\n                                </div> */}\n                                <div className=\"form-group mt-80 d-flex align-items-center justify-content-end\">\n                                    <button className=\"btn btn-main box big\" onClick={this.submit}>Request Withdraw</button>\n                                </div>\n                                    </div>\n                                }\n                              \n                            </div>\n                            \n\n\n                           \n\n                        </div>\n                        \n    }\n                        \n                        \n                        <div className={\"tab mt-3 p-2 bordered \"+(this.state.currentTab != 1 && \"d-none\" )}>\n                            <div className=\"tableHold\">\n                             <table className=\"table\">\n                                <thead>\n                                    <tr className=\"whiteBg title\">\n                                    <td>Date & Time</td>\n                                    <td>Currency</td>\n                                    <td>Transaction ID</td>\n                                    <td>Amount</td>\n                                    <td>Type</td>\n                                    <td>Reason</td>\n                                    <td>Status</td>\n                                    <td>Action</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.withdrawals == null ?\n                                        <Spinner />\n                                        :\n                                        this.state.withdrawals.map((e, i) => {\n                                        return <tr key={i}>\n                                            <td className=\"time\">{e.date}</td>\n                                            <td className=\"time\">{e.currencySymbol}</td>\n                                            <td className=\"time\">{e._id}</td>\n                                            <td className=\"time\">{e.amount}</td>\n                                            <td className=\"time\">{e.withType}</td>\n                                            <td className=\"time\">{e.reason}</td>\n                                            <td className=\"time\">{e.status} <span className=\"dot bg-warning\"></span></td>\n                                            <td><A className=\"text-main\" href=\"\">View</A></td>\n                                        </tr>\n                                        })\n                                    }\n                                    \n                                </tbody>\n                            </table>\n                            </div>\n                        </div>\n                    \n                    </div> }\n                    {/* <!-- end center column --> */}\n                    <div className=\"col-sm empty-container-with-out-border right-column\">\n                    {this.state.reset ? <Spinner /> : <WalletAllBalance />}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WalletWithdraw;\n","import React, {useEffect, useState} from 'react';\nimport Spinner from '../Spinner/index';\nimport {getAllPairs} from '../../http/wallet-calls';\nimport './styles.css';\nimport { search } from 'superagent';\n\n  \nconst CoinSelector = props => {\n    const [coins, setCoins] = useState(null);\n    const [filtered, setFiltered] = useState(null);\n    const [currentCoin, setCurrent] = useState(props.selected);\n\n    const selectCoin = (val, i) => {\n       setCurrent(val.currencySymbol);\n       props.selectCoin(val);\n    };\n    \n    useEffect(() => {\n        getCoins();\n    }, []);\n    \n    // useEffect(() => {\n    //     if(props.selected != undefined && props.selected != null && props.selected != ''){\n    //     console.log(\"selected\" , props.selected)\n    //     setCurrent(props.selected);\n    //     }\n    // }, [props.selected]);\n\n    const getCoins = () => {\n        // var allPairs = window.localStorage.getItem(\"allPairs\");\n        // if(allPairs != null){\n        //     allPairs = JSON.parse(allPairs);\n        //     setCoins(allPairs);\n        // }\n        getAllPairs().then(async resp => {\n            setCoins(resp.data);\n        }, error => {\n            setCoins(null);\n        });\n    }\n\n    const search = (e) => {\n        var val = e.target.value;\n        if(val == ''){\n            setFiltered(null);\n        }else{\n            val = val.toLowerCase();\n            var temp = coins;\n            var selected = [];\n            coins.forEach(element => {\n                if(element.currencyName.toLowerCase().indexOf(val) != -1 || element.currencySymbol.toLowerCase().indexOf(val) != -1){\n                    selected.push(element);\n                }\n            });\n            setFiltered(selected);\n        }\n    }\n\n  return (\n   <div className=\"coinSelector\">\n       <input type=\"text\" placeholder=\"Search\" onChange={search} />\n        <div className=\"bottom-border-list\">\n            {\n                coins == null ?\n                <Spinner />\n                :\n                filtered == null ?\n                coins.map((e, i) => {\n                    return (\n                        e.curnType == 1 || e.currencySymbol == 'BLCK' ?\n                        null\n                        :\n                        <div key={i} className={\"list-item pointer \"+(e.currencySymbol == currentCoin ? 'active' : '')} onClick={() => {selectCoin(e, i)}}>{e.currencyName + \" (\"+e.currencySymbol+\")\"} <span className=\"fa fa-chevron-right\"></span></div>\n                    )\n                })\n                :\n                filtered.map((e, i) => {\n                    return  e.currencySymbol == 'BLCK' ? null : <div key={i} className={\"list-item pointer \"+(e.currencySymbol == currentCoin ? 'active' : '')}  onClick={() => { selectCoin(e, i)}}>{e.currencyName + \" (\"+e.currencySymbol+\")\"} <span className=\"fa fa-chevron-right\"></span></div>\n                })\n            }\n        </div>\n   </div>\n  );\n\n};\n\nexport default CoinSelector;"],"sourceRoot":""}