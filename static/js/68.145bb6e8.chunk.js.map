{"version":3,"sources":["pages/Wallet/trade.js","../node_modules/webpack/buildin/module.js"],"names":["WalletTrade","props","componentDidMount","pair","match","params","undefined","pairs","split","setState","primaryCurrency","secondaryCurrency","error","checkWallet","componentDidUpdate","prevProps","getCurrentPrice","getBalance","fav","id","updateUserFav","then","resp","alertBox","err","walletCheck","console","log","loading","status","data","allCoins","getReward","getTickerPrice","getFavs","getUserFav","favs","allPairs","getPairDetails","message","d","getTradePairs","forEach","el","toCurrency","curnType","index","findIndex","item","i","coin","currencySymbol","push","_id","children","fromCurrency","currencyName","second","state","trade_pairs","curKey","changeTab","newValue","currentTab","getTransactions","handlePrimary","currentPrice","amount","price","primaryBalance","secondaryBalance","history","cancel","pairid","element","cancelOrder","success","msg","submit","e","preventDefault","Number","orderType","tradeType","switchLoader","createOrder","reset","setTimeout","handleSecondary","target","value","getAllBalance","balance","handleAmountChange","val","toFixed","handlePriceChange","activeTrades","getActiveOrders","getTradeDetails","tradeHistory","currentMarketPrice","marketPrice","changeFee","takeFee","updateRewardFeeSettings","getUserDetails","feesStatus","getRewardFeeSettings","toggle","rewardFee","orderDetailsData","ticker","attempt","favPairs","cancelledTrades","coins","content","className","this","href","tabs","type","onChange","length","map","r","selected","onClick","key","disabled","min","placeholder","onToggle","size","config","tradeBase","localStorage","getItem","src","GetAssetImage","moment","created_at","format","toLowerCase","buyuorderId","selluorderId","ordertype","askPrice","askAmount","fee","React","Component","module","exports","webpackPolyfill","deprecate","paths","Object","defineProperty","enumerable","get","l"],"mappings":"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","file":"static/js/68.145bb6e8.chunk.js","sourcesContent":["import * as moment from 'moment';\nimport React from 'react';\nimport ToggleButton from 'react-toggle-button';\nimport { alertBox, switchLoader } from '../../commonRedux';\nimport A from '../../components/A';\nimport Button from '../../components/Button';\nimport WalletMenu from '../../components/Menu/WalletMenu';\nimport WalletMenuMobile from '../../components/Menu/WalletMenuMobile';\nimport Spinner from '../../components/Spinner';\nimport TabsUI from '../../components/Tabs/index';\nimport WalletAllBalance from '../../components/Wallet/allBalance';\nimport config from '../../config';\nimport { GetAssetImage } from '../../globalFunctions';\nimport { orderDetailsData, rewardFee, ticker } from '../../hooks/socket';\nimport walletCheck from '../../hooks/walletCheck';\nimport { cancelOrder, createOrder, currentMarketPrice, getActiveOrders, getAllBalance, getPairDetails, getRewardFeeSettings, getTradeDetails, getTradePairs, getUserDetails, getUserFav, updateRewardFeeSettings, updateUserFav } from '../../http/wallet-calls';\nimport './styles.css';\n\nclass WalletTrade extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggle:0,\n            takeFee:false,\n            attempt:0,\n            favs:[],\n            favPairs: false,\n            primaryCurrency: 'BTC',\n            secondaryCurrency: 'USD',\n            price: '',\n            reset:false,\n            amount: '',\n            primaryBalance: 0,\n            currentPrice:0,\n            secondaryBalance: 0,\n            orderType: 'instant',\n            tradeType: 'buy',\n            activeTrades: [],\n            cancelledTrades: [],\n            curKey:0,\n            tradeHistory: [],\n            pairs: [],\n            coins: [],\n            trade_pairs: [],\n            status: null,\n            loading:true,\n            content : 'loading',\n            currentTab: 0\n        };\n    }\n\n    componentDidMount = () => {\n        // localStorage.removeItem(\"walletToken\");\n        try {\n            var pair = this.props.match.params.pair;\n            if(pair != undefined && pair != null && pair != ''){\n                var pairs = pair.split(\"_\");\n                this.setState({\n                    primaryCurrency: pairs[0],\n                    secondaryCurrency: pairs[1]\n                });\n            }\n        } catch (error) {\n            \n        }\n   \n        this.checkWallet();\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if(prevProps.match.params.pair != this.props.match.params.pair){\n        try {\n            var pair = this.props.match.params.pair;\n            if(pair != undefined && pair != null && pair != ''){\n                var pairs = pair.split(\"_\");\n                this.setState({\n                    primaryCurrency: pairs[0],\n                    secondaryCurrency: pairs[1]\n                }, ()=>{\n                    this.getCurrentPrice();\n                    this.getBalance();\n                });\n            }\n        } catch (error) {\n            \n        }\n    }\n    };\n\n    fav = (id) => {\n        updateUserFav({fav: id}).then(resp=>{\n            alertBox(true, \"Favourite list updated\", \"success\");\n        }, err=> {\n            alertBox(true,  \"Something went wrong\");\n        })\n    }\n\n    checkWallet = () => {\n        // var kycStatus = window.localStorage.getItem(\"kycStatus\");\n        // if(kycStatus != null){\n        //     kycStatus = kycStatus;\n        //     this.setState({\n        //         loading:false,\n        //         status : kycStatus\n        //     }, () => {\n        //         this.allPairs();\n        //         this.received();\n        //         this.adminBankDetails();\n        //     }); \n        // }\n        walletCheck().then(resp=>{\n            console.log(\"walletcheck\", resp);\n            this.setState({\n                loading: false,\n                status : (resp.data.status == undefined) ? '' : resp.data.status\n            }, () => {\n                if(resp.data.status == 'Accept'){\n                    this.allCoins();\n                    // this.getFavs();\n                    this.getReward();\n                    this.getTickerPrice();\n                    this.getCurrentPrice();\n                    this.getBalance();\n                }\n            }); \n        }, err => {\n            this.setState({\n                loading: false,\n                error: 'Authentication Error!'\n            })\n        })\n    };\n\n    getFavs = () => {\n        getUserFav().then(resp => {\n            this.setState({\n                favs: resp.data\n            })\n        }, err => {\n\n        });\n    }\n    // componentDidMount = () => {\n    //     this.allCoins();\n    //     this.allPairs();\n    //     this.getCurrentPrice();\n    //     this.getBalance();\n    // }\n\n\n\n    allPairs = () => {\n        getPairDetails().then(resp => {\n            this.setState({\n                pairs: resp.message\n            })\n        }, err => {\n            console.log(err);\n        });\n    }\n\n    allCoins = () => {\n        // getAllPairs().then(resp => {\n        //     console.log(resp);\n        //     this.setState({\n        //         coins: resp.data\n        //     })\n        // }, err => {\n        //     console.log(err);\n        // });\n        var d = [];\n        var index;\n        getTradePairs().then(resp => {\n            console.log(\"pair\", resp);\n            if(resp != null){\n                this.setState({\n                    pairs: resp\n                });\n                resp.forEach(function(el){\n                    if(el.status == 1 && el.toCurrency != null && el.toCurrency.curnType == 1){\n                        console.log(el.pair)\n                        index = d.findIndex(function(item, i){\n                        return item.coin === el.toCurrency.currencySymbol;\n                      });\n                    if(index == -1){\n                        d.push({coin: el.toCurrency.currencySymbol, id: el.toCurrency._id, children: [\n                            {currencySymbol: el.fromCurrency.currencySymbol, currencyName: el.fromCurrency.currencyName, id: el.fromCurrency._id}\n                        ]});\n                        \n                    }else{\n                        d[index]['children'].push({currencySymbol: el.fromCurrency.currencySymbol, currencyName: el.fromCurrency.currencyName,id: el.fromCurrency._id})\n                    }\n                }\n                })\n                var second =  this.state.secondaryCurrency;\n                var index = d.findIndex(function(item, i){\n                    return item.coin === second;\n                  });\n                this.setState({\n                    trade_pairs: d,\n                    curKey: index\n                })\n            }\n          \n        }, err => {\n            console.log(err);\n        });\n    }\n\n    changeTab = (newValue) => {\n        \n        if(newValue == 1 || newValue == 2){\n            this.setState({currentTab: newValue, loading:true});\n            this.getTransactions();\n            // this.activeTrades();\n        }else{\n            this.setState({currentTab: newValue, loading:false});\n        }\n    };\n\n    handlePrimary = (newValue) => {\n        this.setState({primaryCurrency: newValue, currentPrice: 0, amount:'', price: '', primaryBalance: 0, secondaryBalance: 0}, () => {\n            // this.getCurrentPrice();\n            // this.getBalance();\n            this.props.history.push(\"/wallet/trading/\"+newValue+\"_\"+this.state.secondaryCurrency);\n        });\n    };\n    cancel = (id, pair) => {\n        var pairid = 0;\n        this.state.pairs.forEach(element => {\n            if(element.pair == pair){\n                pairid = element._id\n            }\n        });\n        var data = {\n            \"order_id\" : id,\n            \"pair_id\" : pairid\n        };\n        cancelOrder(data).then(resp=>{\n            console.log(resp);\n            if(resp.data.success){\n                alertBox(true, resp.data.msg, \"success\");\n                this.getTransactions();\n                // this.activeTrades();\n            }else{\n                alertBox(true, resp.data.msg);\n            }\n            this.setState({\n                loading: false\n            })\n        }, error => {\n            this.setState({\n                loading: false\n            })\n            alertBox(true, \"Unknown Error\");\n        })\n    }\n    submit = (e) => {\n        console.log(\"test\")\n        e.preventDefault();\n        var pairid = 0;\n        this.state.pairs.forEach(element => {\n            if(element.pair == this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency){\n                pairid = element._id\n            }\n        });\n        var data = {\n            \"amount\": Number(this.state.amount),\n            \"ordertype\": this.state.orderType,\n            \"pair\": pairid,\n            \"price\": Number(this.state.currentPrice),\n            \"stop_price\": Number(this.state.currentPrice),\n            \"tocurrency_price\": Number(this.state.currentPrice),\n            \"tosymbol\": this.state.secondaryCurrency,\n            \"type\": this.state.tradeType\n        };\n        if(this.state.amount == '' || this.state.amount <=0 ){\n            alertBox(true, \"Please fill the valid amount!\");\n        }\n        else if(this.state.tradeType == 'buy' && (this.state.price > this.state.secondaryBalance)){\n            alertBox(true, \"Insufficient \"+this.state.secondaryCurrency+\" balance\");\n        }\n        else if(this.state.tradeType == 'sell' && (this.state.amount > this.state.primaryBalance)){\n            alertBox(true, \"Insufficient \"+this.state.primaryCurrency+\" balance\");\n        }\n        else{\n            switchLoader(true, \"Submitting your order, please wait...\");\n            createOrder(data).then(resp=>{\n                console.log(resp);\n                if(resp.data.success){\n                    alertBox(true, resp.data.msg, \"success\");\n                    this.setState({\n                        price: '',\n                        amount: ''\n                    })\n                    this.getBalance();\n                }else{\n                    alertBox(true, resp.data.msg);\n                }\n                switchLoader();\n                this.setState({\n                    reset: true\n                }, ()=>{\n                    setTimeout(()=>{\n                        this.setState({\n                            reset:false\n                        })\n                    }, 1000);\n                })\n            }, error => {\n                switchLoader();\n                alertBox(true, \"Unknown Error\");\n            })\n        }\n        \n    };\n\n\n    handleSecondary = (e) => {\n        var index = this.state.trade_pairs.findIndex(function(item, i){\n            return item.coin === e.target.value;\n          });\n        this.setState({secondaryCurrency: e.target.value, currentPrice: 0, amount:'', price: '', primaryBalance: 0, secondaryBalance: 0, curKey: index}, () => {\n            this.props.history.push(\"/wallet/trading/\"+this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency);\n            // this.getCurrentPrice();\n            // this.getBalance();\n        });\n    };\n\n    getBalance = () => {\n        getAllBalance().then(resp => {\n            resp.data.forEach(element => {\n                if(element.currencySymbol == this.state.primaryCurrency){\n                    this.setState({\n                        primaryBalance: element.balance\n                    })\n                }\n                if(element.currencySymbol == this.state.secondaryCurrency){\n                    this.setState({\n                        secondaryBalance: element.balance\n                    })\n                }\n            });\n        }, err => {\n\n        });\n    }\n\n    handleAmountChange = (e) => {\n        var val = e.target.value;\n        console.log(val)\n        var price = (val*this.state.currentPrice).toFixed(8);\n        this.setState({price: price, amount: val});\n    };\n\n    handlePriceChange = (e) => {\n        var val = e.target.value;\n        console.log(val);\n        var amount = (val/this.state.currentPrice).toFixed(8);\n        this.setState({amount: amount, price: val});\n    };\n\n\n\n    activeTrades = () =>{\n        getActiveOrders({\n            \"FilPerpage\": 5,\n            \"FilPage\": 1\n        }).then(resp => {\n            this.setState({\n                activeTrades: resp.data\n            })\n        })\n    };\n\n    getTransactions = () => {\n\n        getTradeDetails({\"FilPerpage\": 10, \"FilPage\": 1, 'pair': this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency}).then(resp => {\n            this.setState({\n                loading:false,\n                tradeHistory: resp.data\n            })\n        }, err => {\n            console.log(err);\n        });\n    };\n\n    getCurrentPrice = () => {\n\n        currentMarketPrice({'pair': this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency}).then(resp => {\n            console.log(resp);\n            if(resp.data != undefined){\n            this.setState({\n                currentPrice: resp.data.marketPrice\n            })\n        }\n        }, err => {\n            console.log(err);\n        });\n    };\n    changeFee = () => {\n        var d = {\n            \"feesStatus\": this.state.takeFee ? 0 : 1\n        }\n        updateRewardFeeSettings(d).then(resp=>{\n            \n        }, err=>{\n\n        })\n    }\n    getReward = () =>{\n        getUserDetails().then(resp=>{\n            try {\n                this.setState({\n                    takeFee: resp.data.feesStatus == 1\n                })\n            } catch (error) {\n                \n            }\n        })\n        getRewardFeeSettings().then(resp=>{\n            try {\n                this.setState({\n                    toggle: resp.data[0].status\n                })\n            } catch (error) {\n                \n            }\n        }, err=>{\n\n        })\n        rewardFee((resp) => {\n            try {\n                this.setState({\n                    toggle: resp[0].status\n                })\n            } catch (error) {\n                \n            }\n            // if(data.pair == this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency){\n            //    this.setState({\n            //     currentPrice: data.marketPrice\n            //    }) \n            // }\n            // console.log(data);\n            // var temp = coins;\n            // temp[i].marketPrice = data.marketPrice;\n            // setCoins(temp);\n          });\n          orderDetailsData((resp) => {\n            try {\n             console.log(resp)\n            } catch (error) {\n                \n            }\n            // if(data.pair == this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency){\n            //    this.setState({\n            //     currentPrice: data.marketPrice\n            //    }) \n            // }\n            // console.log(data);\n            // var temp = coins;\n            // temp[i].marketPrice = data.marketPrice;\n            // setCoins(temp);\n          });\n    }\n\n    getTickerPrice = () =>{\n        ticker(`liquiditypairdetails`, (data) => {\n            if(data.pair == this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency){\n               this.setState({\n                currentPrice: data.marketPrice\n               }) \n            }\n            // console.log(data);\n            // var temp = coins;\n            // temp[i].marketPrice = data.marketPrice;\n            // setCoins(temp);\n          });\n    }\n\n    render() {\n\n        return (\n            <div className=\"container my-wall-container tradePage\">\n                <div className=\"row mt-2\">\n\n                    {/* <!-- left column --> */}\n                    <div className=\"col-sm empty-container-with-out-border left-column\">\n                        <WalletMenu {...this.props} />\n                    </div>\n                    {/* <!-- end left column --> */}\n\n                    {/* <!-- center column --> */}\n                    {\n                        this.state.loading && <div className=\"col-sm empty-container-with-border center-column\"><Spinner /></div>\n                    }\n                    {\n                        this.state.status != 'Accept' && !this.state.loading  && <div className=\"col-sm empty-container-with-border center-column\">\n                            <p className=\"text-danger text-center mt-4\">Finish KYC to use this feature</p>\n                            <div className=\"text-center\">\n                                <A href=\"/wallet/verification\"><button className=\"btn btn-main\">Go to Verification</button></A>\n                            </div>\n                        </div>\n                    }\n                    {\n                        !this.state.loading && this.state.status == 'Accept' &&  <div className=\"col-sm empty-container-with-border center-column\">\n                    <WalletMenuMobile {...this.props} />\n                    <TabsUI tabs={['Buy / Sell', 'Trade History']} type=\"transactions\" className=\"noBorder\" currentTab={this.state.currentTab} changeTab={this.changeTab} />\n                    {\n                        this.state.currentTab == 0 ? \n                        <div className=\"tab row m--1 mt-2\">\n                            <div className=\"col-md-5 p-1\">\n                            <div className=\"bordered p-3\">\n                                <div className=\"basePairs d-flex align-items-center justify-between\">\n                                    {/* <div className=\"favButton mb-2 form-control mr-1 pointer\" onClick={()=>this.setState({favPairs: !this.state.favPairs})}><i className=\"fa fa-star\"></i> Fav</div> */}\n                                    <select className=\"form-control mb-2\" onChange={this.handleSecondary}>\n                                    {\n                                        this.state.trade_pairs.length > 0 && this.state.trade_pairs.map((r, i) => {\n                                            return <option value={r.coin} selected={this.state.secondaryCurrency == r.coin ? true : false}>{r.coin}</option>\n                                        })\n                                    }   \n                                    </select>\n                                </div>\n                             {/* <select className=\"form-control mb-2\" onChange={this.handleSecondary}>\n                                    {\n                                        this.state.coins.length > 0 && this.state.coins.map((r, i) => {\n                                            return ((r.currencySymbol == this.state.primaryCurrency) || (r.curnType == 1 && (this.state.primaryCurrency == 'INR' || this.state.primaryCurrency == 'EUR' || this.state.primaryCurrency == 'USD'))) ? null : <option value={r.currencySymbol} selected={this.state.secondaryCurrency == r.currencySymbol ? true : false}>{r.currencySymbol}</option>\n                                        })\n                                    }   \n                                </select> */}\n                                {/* <input type=\"text\" placeholder=\"Search\" /> */}\n                                \n                                <div className=\"bottom-border-list\">\n                                    {\n                                        this.state.favPairs ?\n                                        null\n                                        :\n                                        this.state.trade_pairs[this.state.curKey] != undefined && this.state.trade_pairs[this.state.curKey]['children'].length > 0 && this.state.trade_pairs[this.state.curKey]['children'].map((r, i) => {\n                                            return <div className={\"list-item pointer \"+(this.state.primaryCurrency == r.currencySymbol ? 'bg-main text-white' : '')} onClick={() => this.handlePrimary(r.currencySymbol)} key={i}>\n                                                {r.currencyName} ({r.currencySymbol}) <span className=\"fa fa-chevron-right\"></span>\n                                            </div>\n                                        })\n                                    }   \n                                </div>\n                            </div>\n                                    \n                            </div>\n                            <div className=\"col-md-7 p-1\">\n                                <div className=\"bordered p-3\">\n                                    <div className=\"d-flex align-items-center justify-content-between\">\n                                        <p><strong>Pair:</strong> {this.state.primaryCurrency}_{this.state.secondaryCurrency}</p>\n                                        {<p className=\"text-small  text-right\">1 <span className=\"text-primary\">{this.state.primaryCurrency}</span> = {this.state.currentPrice.toFixed(8)} <span className=\"text-primary\">{this.state.secondaryCurrency}</span></p> }\n                                    </div>\n                                   \n                              \n                                    <div className=\"form-group\">\n                                    <div className=\"switch-buttons mb-4\">\n                                        <button onClick={() => {this.setState({tradeType: 'buy'})}} className={\"btn box \"+(this.state.tradeType == 'buy' ? 'btn-main' : 'btn-light')}>Buy</button>\n                                        <button onClick={() => {this.setState({tradeType: 'sell'})}} className={\"btn box \"+(this.state.tradeType == 'sell' ? 'btn-main' : 'btn-light')}>Sell</button>\n                                    </div>\n                                    </div>\n                                    {/* <div className=\"form-group\">\n                                    <div className=\"switch-buttons mb-4\">\n                                        <button onClick={() => {this.setState({orderType: 'market'})}} className={\"btn box \"+(this.state.orderType == 'market' ? 'btn-main' : 'btn-light')}>Market</button>\n                                        <button onClick={() => {this.setState({orderType: 'instant'})}} className={\"btn box \"+(this.state.orderType == 'instant' ? 'btn-main' : 'btn-light')}>Limit</button>\n                                    </div>\n                                    </div> */}\n                                    <div className=\"form-group\">\n                                        {/* <div className=\"d-flex justify-content-between\"><label>Guranteed Order</label><span className=\"text-secondary\">$ 19.22 per XBT</span></div> */}\n                                        <div className=\"d-flex justify-content-start align-items\">\n                                            <input type=\"text\" value={this.state.primaryCurrency} className=\"form-control currencySelect\" disabled />\n                                            <input className=\"form-control\" type=\"number\" min={0} placeholder=\"Amount\" value={this.state.amount} onChange={this.handleAmountChange} />\n                                        </div>\n                                    </div>\n                                    <div className=\"d-flex align-items-center justify-content-between\">\n                                        <div>\n                                            <strong>{this.state.primaryCurrency} Bal</strong>\n                                            <div><small>{this.state.primaryBalance.toFixed(8)}</small></div>\n                                        </div>\n                                        <div className=\"text-right\">\n                                            <strong>{this.state.secondaryCurrency} Bal</strong>\n                                            <div><small>{this.state.secondaryBalance.toFixed(8)}</small></div>\n                                        </div>\n                                    </div>\n                                    {/* <div className=\"form-group\">\n                                        <label>Total</label>\n                                        <div className=\"d-flex justify-content-start align-items\">\n                                        <input type=\"text\" value={this.state.secondaryCurrency} className=\"form-control currencySelect\" disabled />\n                                        <input className=\"form-control\" type=\"number\" placeholder=\"Amount\"  onChange={this.handlePriceChange} readOnly={this.state.orderType == 'instant' ? false : true} value={this.state.price} />\n                                        <input type=\"text\" value={\"Bal: \"+this.state.secondaryBalance} className=\"form-control balance\" disabled />\n                                        </div>\n                                    </div> */}\n                                    <div className=\"form-group mt-80 d-flex align-items-center justify-content-between\">\n                                    { this.state.toggle == 1 ? <div>\n                                        <ToggleButton\n                                    value={ this.state.takeFee || false }\n                                    onToggle={(value) => {\n                                      console.log(!value);\n                                      this.setState({\n                                        takeFee: !value,\n                                      }, this.changeFee());\n                                    }} /><small>Take fee from Reward Points  </small></div> : <div></div> }\n                                <Button size=\"big\" className=\"text-uppercase\" disabled={this.state.loading} onClick={this.submit}>\n                                    {\n                                        this.state.loading ? \n                                        <Spinner />\n                                        :\n                                        <div>{this.state.tradeType} {this.state.primaryCurrency}</div>\n                                    }\n                                    \n                                </Button>\n\n                                \n                            </div>\n                            <a href={config.tradeBase+\"?pair=\"+this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency+\"&token=\"+localStorage.getItem(\"walletToken\") } className=\"advancedTrading\" target=\"_blank\">\n                                             <img src={GetAssetImage(\"candlestick2.png\")} />\n                                             <div>\n                                        <h3>Advanced Trading</h3>\n                                        <p>Charts, Order Books, Market Depth, etc...</p>\n                                        </div>\n                                        </a>\n                                </div>\n                            </div>\n                            \n                            \n                           \n                            {/* <table className=\"table\">\n                                <tr className=\"whiteBg title\">\n                                  <td>Pair</td>\n                                  <td>Change</td>\n                                  <td>Sell</td>\n                                  <td>Buy</td>\n                                  <td>High/Low</td> \n                                </tr>\n                                <tr>\n                                    <td className=\"time\">XBTETH</td>\n                                    <td className=\"time\">-12.2%</td>\n                                    <td className=\"time\"><button className=\"btn btn-danger box\">Sell</button></td>\n                                    <td className=\"time\"><button className=\"btn btn-success box\">Buy</button></td>\n                                    <td className=\"time\">11,54654</td>\n                                    \n                                </tr>\n                                <tr>\n                                <td className=\"time\">XBTETH</td>\n                                    <td className=\"time\">-12.2%</td>\n                                    <td className=\"time\"><button className=\"btn btn-danger box\">Sell</button></td>\n                                    <td className=\"time\"><button className=\"btn btn-success box\">Buy</button></td>\n                                    <td className=\"time\">11,54654</td>\n                                </tr>\n                                <tr>\n                                <td className=\"time\">XBTETH</td>\n                                    <td className=\"time\">-12.2%</td>\n                                    <td className=\"time\"><button className=\"btn btn-danger box\">Sell</button></td>\n                                    <td className=\"time\"><button className=\"btn btn-success box\">Buy</button></td>\n                                    <td className=\"time\">11,54654</td>\n                                    \n                                </tr>\n                            </table> */}\n\n                        </div>\n                        // :\n                        // this.state.currentTab == 1 ? \n                        \n                        // <div className=\"tab mt-3 p-2\">\n                        //     {\n                        //         this.state.loading ? <Spinner /> :\n                        //         <div className=\"p-2\">\n                        //         <h3>Active Orders</h3>\n                        //         {\n                        //             this.state.activeTrades.length > 0 ?\n                        //             <table className=\"table\">\n                        //         <tr className=\"whiteBg title\">\n                        //           <td>Placed at</td>\n                        //           <td>Pair</td>\n                        //           <td>Order ID</td>\n                        //           <td>Order Type</td>\n                        //           <td>Type</td>\n                        //           <td>Price</td>\n                        //           <td>Qty</td>\n                        //           <td>Fee</td>\n                        //         </tr>\n                        //         {\n                        //             this.state.activeTrades.map((r, i) => {\n                        //                 return <tr>\n                        //                     <td className=\"time\">{moment(r.created_at).format('MMM DD, YY hh:mm A')}</td>\n                        //                     <td className=\"time\">{r.pair}</td>\n                        //                     <td className=\"time\">{r.orderId} <button className=\"btn btn-danger\" onClick={()=>this.cancel(r.orderId, r.pair)}>Cancel Order</button></td>\n                        //                     <td className=\"time\">{r.ordertype}</td>\n                        //                     <td className=\"time\">{r.type}</td>\n                        //                     <td className=\"time\">{r.askPrice.toFixed(8)}</td>\n                        //                     <td className=\"time\">{r.askAmount}</td>\n                        //                     <td className=\"time\">{r.fee.toFixed(8)}</td>\n                        //                 </tr>\n                        //             })\n                        //         }\n                        //     </table>\n                        //             :\n                        //             <p className=\"bordered no-found\">No Orders Found</p>\n                        //         }\n                        //         <h3 className=\"mt-4\">Cancelled Orders</h3>\n                        //         {\n                        //             this.state.cancelledTrades.length > 0 ?\n                        //             <table className=\"table\">\n                        //         <tr className=\"whiteBg title\">\n                        //           <td>Placed at</td>\n                        //           <td>Pair</td>\n                        //           <td>Order ID</td>\n                        //           <td>Order Type</td>\n                        //           <td>Type</td>\n                        //           <td>Price</td>\n                        //           <td>Qty</td>\n                        //           <td>Fee</td>\n                        //         </tr>\n                        //         {\n                        //             this.state.cancelledTrades.map((r, i) => {\n                        //                 return <tr>\n                        //                     <td className=\"time\">{moment(r.created_at).format('MMM DD, YY hh:mm A')}</td>\n                        //                     <td className=\"time\">{r.pair}</td>\n                        //                     <td className=\"time\">{r.orderId}</td>\n                        //                     <td className=\"time\">{r.ordertype}</td>\n                        //                     <td className=\"time\">{r.type}</td>\n                        //                     <td className=\"time\">{r.askPrice.toFixed(8)}</td>\n                        //                     <td className=\"time\">{r.askAmount}</td>\n                        //                     <td className=\"time\">{r.fee.toFixed(8)}</td>\n                        //                 </tr>\n                        //             })\n                        //         }\n                        //     </table>\n                        //             :\n                        //             <p className=\"bordered no-found\">No Orders Found</p>\n                        //         }\n                        //     </div>\n                        //     }\n                           \n                        // </div>\n                        :\n                        <div className=\"tab mt-3 p-2\">\n                             {\n                                this.state.loading ? <Spinner /> :\n                                <div>\n                                <h3>Trade History - {this.state.primaryCurrency+\"_\"+this.state.secondaryCurrency}</h3>\n                                {\n                                    this.state.tradeHistory.length > 0 ?\n                                    <table className=\"table\">\n                                <tr className=\"whiteBg title\">\n                                  <td>Placed at</td>\n                                  <td>Pair</td>\n                                  <td>Order ID</td>\n                                  <td>Order Type</td>\n                                  <td>Type</td>\n                                  <td>Price</td>\n                                  <td>Qty</td>\n                                  <td>Fee</td>\n                                </tr>\n                                {\n                                    this.state.tradeHistory.map((r, i) => {\n                                        return <tr>\n                                            <td className=\"time\">{moment(r.created_at).format('MMM DD, YY hh:mm A')}</td>\n                                            <td className=\"time\">{r.pair}</td>\n                                            <td className=\"time\">{r.type.toLowerCase() == 'buy' ? r.buyuorderId : r.selluorderId}</td>\n                                            <td className=\"time\">{r.ordertype}</td>\n                                            <td className=\"time\">{r.type}</td>\n                                            <td className=\"time\">{r.askPrice.toFixed(8)}</td>\n                                            <td className=\"time\">{r.askAmount}</td>\n                                            <td className=\"time\">{r.fee.toFixed(8)}</td>\n                                        </tr>\n                                    })\n                                }\n                            </table>\n                                    :\n                                    <p className=\"bordered no-found\">No Orders Found</p>\n                                }\n                                \n                            </div>\n                            }\n                        </div>\n                    }\n                    </div> }\n                    {/* <!-- end center column --> */}\n                    <div className=\"col-sm empty-container-with-out-border right-column\">\n                    {\n                                        !this.state.reset && <WalletAllBalance />}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default WalletTrade;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}